// Auto-generated. Do not edit!

// (in-package mongodb_store_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let StringList = require('./StringList.js');
let StringPairList = require('./StringPairList.js');

//-----------------------------------------------------------

class MoveEntriesGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.database = null;
      this.collections = null;
      this.move_before = null;
      this.delete_after_move = null;
      this.query = null;
    }
    else {
      if (initObj.hasOwnProperty('database')) {
        this.database = initObj.database
      }
      else {
        this.database = '';
      }
      if (initObj.hasOwnProperty('collections')) {
        this.collections = initObj.collections
      }
      else {
        this.collections = new StringList();
      }
      if (initObj.hasOwnProperty('move_before')) {
        this.move_before = initObj.move_before
      }
      else {
        this.move_before = {secs: 0, nsecs: 0};
      }
      if (initObj.hasOwnProperty('delete_after_move')) {
        this.delete_after_move = initObj.delete_after_move
      }
      else {
        this.delete_after_move = false;
      }
      if (initObj.hasOwnProperty('query')) {
        this.query = initObj.query
      }
      else {
        this.query = new StringPairList();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MoveEntriesGoal
    // Serialize message field [database]
    bufferOffset = _serializer.string(obj.database, buffer, bufferOffset);
    // Serialize message field [collections]
    bufferOffset = StringList.serialize(obj.collections, buffer, bufferOffset);
    // Serialize message field [move_before]
    bufferOffset = _serializer.duration(obj.move_before, buffer, bufferOffset);
    // Serialize message field [delete_after_move]
    bufferOffset = _serializer.bool(obj.delete_after_move, buffer, bufferOffset);
    // Serialize message field [query]
    bufferOffset = StringPairList.serialize(obj.query, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MoveEntriesGoal
    let len;
    let data = new MoveEntriesGoal(null);
    // Deserialize message field [database]
    data.database = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [collections]
    data.collections = StringList.deserialize(buffer, bufferOffset);
    // Deserialize message field [move_before]
    data.move_before = _deserializer.duration(buffer, bufferOffset);
    // Deserialize message field [delete_after_move]
    data.delete_after_move = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [query]
    data.query = StringPairList.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.database.length;
    length += StringList.getMessageSize(object.collections);
    length += StringPairList.getMessageSize(object.query);
    return length + 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mongodb_store_msgs/MoveEntriesGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '48aa6e70c15714ce3dfa1b8f64da4ec6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # the db to move entries from
    string database
    # the collections to move entries from
    StringList collections
    # only entries before rospy.get_rostime() - move_before are moved. if 0, all are moved
    duration move_before
    # delete moved entries after replication
    bool delete_after_move
    # query to move entries by
    StringPairList query
    
    ================================================================================
    MSG: mongodb_store_msgs/StringList
    string[] data
    
    ================================================================================
    MSG: mongodb_store_msgs/StringPairList
    StringPair[] pairs
    
    ================================================================================
    MSG: mongodb_store_msgs/StringPair
    string first
    string second
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MoveEntriesGoal(null);
    if (msg.database !== undefined) {
      resolved.database = msg.database;
    }
    else {
      resolved.database = ''
    }

    if (msg.collections !== undefined) {
      resolved.collections = StringList.Resolve(msg.collections)
    }
    else {
      resolved.collections = new StringList()
    }

    if (msg.move_before !== undefined) {
      resolved.move_before = msg.move_before;
    }
    else {
      resolved.move_before = {secs: 0, nsecs: 0}
    }

    if (msg.delete_after_move !== undefined) {
      resolved.delete_after_move = msg.delete_after_move;
    }
    else {
      resolved.delete_after_move = false
    }

    if (msg.query !== undefined) {
      resolved.query = StringPairList.Resolve(msg.query)
    }
    else {
      resolved.query = new StringPairList()
    }

    return resolved;
    }
};

module.exports = MoveEntriesGoal;
