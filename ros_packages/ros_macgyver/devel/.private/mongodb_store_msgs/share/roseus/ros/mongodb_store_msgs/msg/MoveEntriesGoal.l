;; Auto-generated. Do not edit!


(when (boundp 'mongodb_store_msgs::MoveEntriesGoal)
  (if (not (find-package "MONGODB_STORE_MSGS"))
    (make-package "MONGODB_STORE_MSGS"))
  (shadow 'MoveEntriesGoal (find-package "MONGODB_STORE_MSGS")))
(unless (find-package "MONGODB_STORE_MSGS::MOVEENTRIESGOAL")
  (make-package "MONGODB_STORE_MSGS::MOVEENTRIESGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveEntriesGoal.msg.html


(defclass mongodb_store_msgs::MoveEntriesGoal
  :super ros::object
  :slots (_database _collections _move_before _delete_after_move _query ))

(defmethod mongodb_store_msgs::MoveEntriesGoal
  (:init
   (&key
    ((:database __database) "")
    ((:collections __collections) (instance mongodb_store_msgs::StringList :init))
    ((:move_before __move_before) (instance ros::time :init))
    ((:delete_after_move __delete_after_move) nil)
    ((:query __query) (instance mongodb_store_msgs::StringPairList :init))
    )
   (send-super :init)
   (setq _database (string __database))
   (setq _collections __collections)
   (setq _move_before __move_before)
   (setq _delete_after_move __delete_after_move)
   (setq _query __query)
   self)
  (:database
   (&optional __database)
   (if __database (setq _database __database)) _database)
  (:collections
   (&rest __collections)
   (if (keywordp (car __collections))
       (send* _collections __collections)
     (progn
       (if __collections (setq _collections (car __collections)))
       _collections)))
  (:move_before
   (&optional __move_before)
   (if __move_before (setq _move_before __move_before)) _move_before)
  (:delete_after_move
   (&optional __delete_after_move)
   (if __delete_after_move (setq _delete_after_move __delete_after_move)) _delete_after_move)
  (:query
   (&rest __query)
   (if (keywordp (car __query))
       (send* _query __query)
     (progn
       (if __query (setq _query (car __query)))
       _query)))
  (:serialization-length
   ()
   (+
    ;; string _database
    4 (length _database)
    ;; mongodb_store_msgs/StringList _collections
    (send _collections :serialization-length)
    ;; duration _move_before
    8
    ;; bool _delete_after_move
    1
    ;; mongodb_store_msgs/StringPairList _query
    (send _query :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _database
       (write-long (length _database) s) (princ _database s)
     ;; mongodb_store_msgs/StringList _collections
       (send _collections :serialize s)
     ;; duration _move_before
       (write-long (send _move_before :sec) s) (write-long (send _move_before :nsec) s)
     ;; bool _delete_after_move
       (if _delete_after_move (write-byte -1 s) (write-byte 0 s))
     ;; mongodb_store_msgs/StringPairList _query
       (send _query :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _database
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _database (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; mongodb_store_msgs/StringList _collections
     (send _collections :deserialize buf ptr-) (incf ptr- (send _collections :serialization-length))
   ;; duration _move_before
     (send _move_before :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _move_before :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; bool _delete_after_move
     (setq _delete_after_move (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; mongodb_store_msgs/StringPairList _query
     (send _query :deserialize buf ptr-) (incf ptr- (send _query :serialization-length))
   ;;
   self)
  )

(setf (get mongodb_store_msgs::MoveEntriesGoal :md5sum-) "48aa6e70c15714ce3dfa1b8f64da4ec6")
(setf (get mongodb_store_msgs::MoveEntriesGoal :datatype-) "mongodb_store_msgs/MoveEntriesGoal")
(setf (get mongodb_store_msgs::MoveEntriesGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# the db to move entries from
string database
# the collections to move entries from
StringList collections
# only entries before rospy.get_rostime() - move_before are moved. if 0, all are moved
duration move_before
# delete moved entries after replication
bool delete_after_move
# query to move entries by
StringPairList query

================================================================================
MSG: mongodb_store_msgs/StringList
string[] data

================================================================================
MSG: mongodb_store_msgs/StringPairList
StringPair[] pairs

================================================================================
MSG: mongodb_store_msgs/StringPair
string first
string second

")



(provide :mongodb_store_msgs/MoveEntriesGoal "48aa6e70c15714ce3dfa1b8f64da4ec6")


