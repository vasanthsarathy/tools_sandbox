# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mongodb_store_msgs/MongoQueryMsgRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mongodb_store_msgs.msg

class MongoQueryMsgRequest(genpy.Message):
  _md5sum = "3dce95387658eb89ce25e603efe525cd"
  _type = "mongodb_store_msgs/MongoQueryMsgRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


string JSON_QUERY="jnsdfskajd_fmgs.dlf"

string database
string collection

string type

bool single

uint16 limit

StringPairList message_query

StringPairList meta_query

StringPairList sort_query

StringPairList projection_query

================================================================================
MSG: mongodb_store_msgs/StringPairList
StringPair[] pairs

================================================================================
MSG: mongodb_store_msgs/StringPair
string first
string second
"""
  # Pseudo-constants
  JSON_QUERY = r'"jnsdfskajd_fmgs.dlf"'

  __slots__ = ['database','collection','type','single','limit','message_query','meta_query','sort_query','projection_query']
  _slot_types = ['string','string','string','bool','uint16','mongodb_store_msgs/StringPairList','mongodb_store_msgs/StringPairList','mongodb_store_msgs/StringPairList','mongodb_store_msgs/StringPairList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       database,collection,type,single,limit,message_query,meta_query,sort_query,projection_query

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MongoQueryMsgRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.database is None:
        self.database = ''
      if self.collection is None:
        self.collection = ''
      if self.type is None:
        self.type = ''
      if self.single is None:
        self.single = False
      if self.limit is None:
        self.limit = 0
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.sort_query is None:
        self.sort_query = mongodb_store_msgs.msg.StringPairList()
      if self.projection_query is None:
        self.projection_query = mongodb_store_msgs.msg.StringPairList()
    else:
      self.database = ''
      self.collection = ''
      self.type = ''
      self.single = False
      self.limit = 0
      self.message_query = mongodb_store_msgs.msg.StringPairList()
      self.meta_query = mongodb_store_msgs.msg.StringPairList()
      self.sort_query = mongodb_store_msgs.msg.StringPairList()
      self.projection_query = mongodb_store_msgs.msg.StringPairList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.database
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.collection
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BH().pack(_x.single, _x.limit))
      length = len(self.message_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.message_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sort_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.sort_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.projection_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.projection_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.sort_query is None:
        self.sort_query = mongodb_store_msgs.msg.StringPairList()
      if self.projection_query is None:
        self.projection_query = mongodb_store_msgs.msg.StringPairList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.database = str[start:end].decode('utf-8')
      else:
        self.database = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collection = str[start:end].decode('utf-8')
      else:
        self.collection = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.single, _x.limit,) = _get_struct_BH().unpack(str[start:end])
      self.single = bool(self.single)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.message_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.message_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sort_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.sort_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projection_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.projection_query.pairs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.database
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.collection
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BH().pack(_x.single, _x.limit))
      length = len(self.message_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.message_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sort_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.sort_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.projection_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.projection_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.sort_query is None:
        self.sort_query = mongodb_store_msgs.msg.StringPairList()
      if self.projection_query is None:
        self.projection_query = mongodb_store_msgs.msg.StringPairList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.database = str[start:end].decode('utf-8')
      else:
        self.database = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collection = str[start:end].decode('utf-8')
      else:
        self.collection = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.single, _x.limit,) = _get_struct_BH().unpack(str[start:end])
      self.single = bool(self.single)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.message_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.message_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sort_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.sort_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projection_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.projection_query.pairs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mongodb_store_msgs/MongoQueryMsgResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mongodb_store_msgs.msg

class MongoQueryMsgResponse(genpy.Message):
  _md5sum = "f348d453c2d7347807f66360b61cd0ef"
  _type = "mongodb_store_msgs/MongoQueryMsgResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
SerialisedMessage[] messages
StringPairList[] metas


================================================================================
MSG: mongodb_store_msgs/SerialisedMessage
# type to of the serialised message
string type
# the serialised message
uint8[] msg
================================================================================
MSG: mongodb_store_msgs/StringPairList
StringPair[] pairs

================================================================================
MSG: mongodb_store_msgs/StringPair
string first
string second
"""
  __slots__ = ['messages','metas']
  _slot_types = ['mongodb_store_msgs/SerialisedMessage[]','mongodb_store_msgs/StringPairList[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       messages,metas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MongoQueryMsgResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.messages is None:
        self.messages = []
      if self.metas is None:
        self.metas = []
    else:
      self.messages = []
      self.metas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.messages)
      buff.write(_struct_I.pack(length))
      for val1 in self.messages:
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.msg
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.metas)
      buff.write(_struct_I.pack(length))
      for val1 in self.metas:
        length = len(val1.pairs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pairs:
          _x = val2.first
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.second
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.messages is None:
        self.messages = None
      if self.metas is None:
        self.metas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.messages = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.SerialisedMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.msg = str[start:end]
        self.messages.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metas = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPairList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pairs = []
        for i in range(0, length):
          val2 = mongodb_store_msgs.msg.StringPair()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.first = str[start:end].decode('utf-8')
          else:
            val2.first = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.second = str[start:end].decode('utf-8')
          else:
            val2.second = str[start:end]
          val1.pairs.append(val2)
        self.metas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.messages)
      buff.write(_struct_I.pack(length))
      for val1 in self.messages:
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.msg
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.metas)
      buff.write(_struct_I.pack(length))
      for val1 in self.metas:
        length = len(val1.pairs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pairs:
          _x = val2.first
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.second
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.messages is None:
        self.messages = None
      if self.metas is None:
        self.metas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.messages = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.SerialisedMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.msg = str[start:end]
        self.messages.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metas = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPairList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pairs = []
        for i in range(0, length):
          val2 = mongodb_store_msgs.msg.StringPair()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.first = str[start:end].decode('utf-8')
          else:
            val2.first = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.second = str[start:end].decode('utf-8')
          else:
            val2.second = str[start:end]
          val1.pairs.append(val2)
        self.metas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class MongoQueryMsg(object):
  _type          = 'mongodb_store_msgs/MongoQueryMsg'
  _md5sum = '45d9c9b353113ab0888f363d63903883'
  _request_class  = MongoQueryMsgRequest
  _response_class = MongoQueryMsgResponse
