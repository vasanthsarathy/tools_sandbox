# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mongodb_store_msgs/MongoUpdateMsgRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mongodb_store_msgs.msg

class MongoUpdateMsgRequest(genpy.Message):
  _md5sum = "5d87a90aa8c3d8f4cf31305f10951711"
  _type = "mongodb_store_msgs/MongoUpdateMsgRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

string database
string collection

bool upsert

StringPairList message_query

StringPairList meta_query

SerialisedMessage message

StringPairList meta

================================================================================
MSG: mongodb_store_msgs/StringPairList
StringPair[] pairs

================================================================================
MSG: mongodb_store_msgs/StringPair
string first
string second

================================================================================
MSG: mongodb_store_msgs/SerialisedMessage
# type to of the serialised message
string type
# the serialised message
uint8[] msg"""
  __slots__ = ['database','collection','upsert','message_query','meta_query','message','meta']
  _slot_types = ['string','string','bool','mongodb_store_msgs/StringPairList','mongodb_store_msgs/StringPairList','mongodb_store_msgs/SerialisedMessage','mongodb_store_msgs/StringPairList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       database,collection,upsert,message_query,meta_query,message,meta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MongoUpdateMsgRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.database is None:
        self.database = ''
      if self.collection is None:
        self.collection = ''
      if self.upsert is None:
        self.upsert = False
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.message is None:
        self.message = mongodb_store_msgs.msg.SerialisedMessage()
      if self.meta is None:
        self.meta = mongodb_store_msgs.msg.StringPairList()
    else:
      self.database = ''
      self.collection = ''
      self.upsert = False
      self.message_query = mongodb_store_msgs.msg.StringPairList()
      self.meta_query = mongodb_store_msgs.msg.StringPairList()
      self.message = mongodb_store_msgs.msg.SerialisedMessage()
      self.meta = mongodb_store_msgs.msg.StringPairList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.database
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.collection
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.upsert))
      length = len(self.message_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.message_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.message.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.message.msg
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.message is None:
        self.message = mongodb_store_msgs.msg.SerialisedMessage()
      if self.meta is None:
        self.meta = mongodb_store_msgs.msg.StringPairList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.database = str[start:end].decode('utf-8')
      else:
        self.database = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collection = str[start:end].decode('utf-8')
      else:
        self.collection = str[start:end]
      start = end
      end += 1
      (self.upsert,) = _get_struct_B().unpack(str[start:end])
      self.upsert = bool(self.upsert)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.message_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.message_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message.type = str[start:end].decode('utf-8')
      else:
        self.message.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.message.msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta.pairs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.database
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.collection
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.upsert))
      length = len(self.message_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.message_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta_query.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta_query.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.message.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.message.msg
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.meta.pairs)
      buff.write(_struct_I.pack(length))
      for val1 in self.meta.pairs:
        _x = val1.first
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.second
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.message_query is None:
        self.message_query = mongodb_store_msgs.msg.StringPairList()
      if self.meta_query is None:
        self.meta_query = mongodb_store_msgs.msg.StringPairList()
      if self.message is None:
        self.message = mongodb_store_msgs.msg.SerialisedMessage()
      if self.meta is None:
        self.meta = mongodb_store_msgs.msg.StringPairList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.database = str[start:end].decode('utf-8')
      else:
        self.database = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collection = str[start:end].decode('utf-8')
      else:
        self.collection = str[start:end]
      start = end
      end += 1
      (self.upsert,) = _get_struct_B().unpack(str[start:end])
      self.upsert = bool(self.upsert)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.message_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.message_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta_query.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta_query.pairs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message.type = str[start:end].decode('utf-8')
      else:
        self.message.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.message.msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meta.pairs = []
      for i in range(0, length):
        val1 = mongodb_store_msgs.msg.StringPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.first = str[start:end].decode('utf-8')
        else:
          val1.first = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.second = str[start:end].decode('utf-8')
        else:
          val1.second = str[start:end]
        self.meta.pairs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mongodb_store_msgs/MongoUpdateMsgResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MongoUpdateMsgResponse(genpy.Message):
  _md5sum = "eb98d6e8d810388b13fa8e5a365eec6a"
  _type = "mongodb_store_msgs/MongoUpdateMsgResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
string id

bool success
"""
  __slots__ = ['id','success']
  _slot_types = ['string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MongoUpdateMsgResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.success is None:
        self.success = False
    else:
      self.id = ''
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MongoUpdateMsg(object):
  _type          = 'mongodb_store_msgs/MongoUpdateMsg'
  _md5sum = 'c9a34b8e3509040b39c21bb4f3c2ca95'
  _request_class  = MongoUpdateMsgRequest
  _response_class = MongoUpdateMsgResponse
